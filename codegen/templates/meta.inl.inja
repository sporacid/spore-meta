#pragma once

#include "spore/meta/meta_placeholder.hpp"

{% for class in classes %}
    {% if truthy($.user_data, "implicit_types") %}
        {% set meta_type_enabled = not existsIn(class.attributes, "_spore_meta_type") or truthy(class.attributes, "_spore_meta_type") %}
    {% else %}
        {% set meta_type_enabled = truthy(class.attributes, "_spore_meta_type") %}
    {% endif %}
    {% if meta_type_enabled and class.definition and not class.nested %}
        template < {# #}
            {% if class.is_template or class.is_template_specialization %}
                {% for template_param in class.template_params %}
                    {{ template_param.type }} {{ template_param.name }}, {# #}
                {% endfor %}
            {% endif %}
            typename func_t
        > {# #}
        constexpr auto {{ class.scope }}::with_meta_type(spore::meta_adl<{{ class.full_name }}>, func_t&& func)
        {
            using namespace spore;

            constexpr meta_type type {
                {% if class.is_template or class.is_template_specialization %}
                    .name = meta_string {"{{ class.scope }}::{{ class.name }}<"}
                    {% for template_param in class.template_params %}
                        {% if template_param.is_variadic %}
                            + meta::strings::to_string<", ", {{ template_param.name }}...>()
                        {% else %}
                            + meta::strings::to_string<{{ template_param.name }}>()
                        {% endif %}
                        {% if not loop.is_last %} + ", " {% endif %}
                    {% endfor %}
                        + meta_string {">"},
                {% else %}
                    .name = meta_string {"{{ class.full_name }}"},
                {% endif %}
                .bases = meta_tuple {
                    {% for base in class.bases %}
                        meta_base {
                            .type = meta_type_ref<{{ base.name }}>{},
                        },
                    {% endfor %}
                },
                .fields = meta_tuple {
                    {% for field in class.fields %}
                        {% if truthy($.user_data, "implicit_fields") %}
                            {% set meta_field_enabled = not existsIn(field.attributes, "_spore_meta_field") or truthy(field.attributes, "_spore_meta_field") %}
                        {% else %}
                            {% set meta_field_enabled = truthy(class.attributes, "_spore_meta_implicit_fields") or truthy(field.attributes, "_spore_meta_field") %}
                        {% endif %}
                        {% if meta_field_enabled and field.flags.public %}
                            meta_field {
                                .name = meta_string {"{{ field.name }}"},
                                .field = &{{ class.full_name }}::{{ field.name }},
                                .attributes = meta_tuple {
                                    {{ include("templates/meta_attribute.inja", field.attributes) }} {# #}
                                },
                            },
                        {% endif %}
                    {% endfor %}
                },
                .functions = meta_tuple {
                    {% for function in class.functions %}
                        {% if truthy($.user_data, "implicit_functions") %}
                            {% set meta_function_enabled = not existsIn(function.attributes, "_spore_meta_function") or truthy(function.attributes, "_spore_meta_function") %}
                        {% else %}
                            {% set meta_function_enabled = truthy(class.attributes, "_spore_meta_implicit_functions") or truthy(function.attributes, "_spore_meta_function") %}
                        {% endif %}
                        {% if meta_function_enabled and function.flags.public %}
                            meta_function {
                                .name = meta_string {"{{ function.name }}"},
                                .function = [] {# #}
                                {% if function.is_template %}
                                    < {# #}
                                    {% for template_param in function.template_params %}
                                        {{ template_param.type }} {{ template_param.name }} {% if not loop.is_last %} , {% endif %} {# #}
                                    {% endfor %}
                                    > {# #}
                                {% endif %}
                                ({# #}
                                    {% if not function.flags.static %}
                                        {% if function.flags.const %} const {% endif %}
                                        {{ class.full_name }}& this_
                                        {% if length(function.arguments) > 0 %} , {% endif %}
                                    {% endif %}
                                    {% for argument in function.arguments %}
                                        {{ argument.type.name }} {% if argument.is_variadic %} ... {% endif %} {{ " " }} {{ argument.name }}
                                        {% if not loop.is_last %} , {% endif %}
                                    {% endfor %} {# #}
                                ) {
                                    return
                                    {% if function.flags.static %}
                                        {{ class.full_name }}::{% if function.is_template %} template {% endif %}{{ function.name }} {# #}
                                    {% else %}
                                        this_.{% if function.is_template %} template {% endif %}{{ function.name }} {# #}
                                    {% endif %}
                                    {% if function.is_template %}
                                        < {# #}
                                        {% for template_param in function.template_params %}
                                            {{ template_param.name }}
                                            {% if template_param.is_variadic %} ... {% endif %}
                                            {% if not loop.is_last %} , {% endif %}
                                        {% endfor %}
                                        > {# #}
                                    {% endif %}
                                    ( {# #}
                                        {% for argument in function.arguments %} {# #}
                                            {{ argument.name }} {% if argument.is_variadic %} ... {% endif %}
                                            {% if not loop.is_last %} , {% endif %}
                                        {% endfor %}
                                    );
                                },
                                {% set return_placeholder = false %}
                                {% for template_param in function.template_params %}
                                    {% if contains(function.return_type.name, template_param.name) %}
                                        {% set return_placeholder = true %}
                                        {#
                                        {% if starts_with(template_param.type, "typename") %}
                                            {% set return_placeholder = format("meta_type_placeholder<{}>", template_param.is_variadic) %}
                                        {% else %}
                                            {% set return_placeholder = format("meta_value_placeholder<{}, {}>", template_param.type, template_param.is_variadic) %}
                                        {% endif %}
                                        #}
                                    {% endif %}
                                {% endfor %}
                                .return_type = meta_type_ref< {# #}
                                    {% if truthy(return_placeholder) %}
                                        meta_placeholder
                                        {# {{ return_placeholder }} #}
                                    {% else %}
                                        {{ function.return_type.name }}
                                    {% endif %}
                                >{},
                                .arguments = meta_tuple {
                                    {% if not function.flags.static %}
                                        meta_argument {
                                            .name = meta_string {"this"},
                                            .type = meta_type_ref<{% if function.flags.const %} const {% endif %} {{ class.full_name }}&>{},
                                            .attributes = meta_tuple {},
                                        },
                                    {% endif %}
                                    {% for argument in function.arguments %}
                                        {% set argument_placeholder = false %}
                                        {% for template_param in function.template_params %}
                                            {% if contains(argument.type.name, template_param.name) %}
                                                {% set argument_placeholder = true %}
                                                {#
                                                {% if starts_with(template_param.type, "typename") %}
                                                    {% set argument_placeholder = format("meta_type_placeholder<{}>", template_param.is_variadic) %}
                                                {% else %}
                                                    {% set argument_placeholder = format("meta_value_placeholder<{}, {}>", template_param.type, template_param.is_variadic) %}
                                                {% endif %}
                                                #}
                                            {% endif %}
                                        {% endfor %}
                                        meta_argument {
                                            .name = meta_string {"{{ argument.name }}"},
                                            .type = meta_type_ref< {# #}
                                                {% if truthy(argument_placeholder) %}
                                                    meta_placeholder
                                                    {# {{ argument_placeholder }} #}
                                                {% else %}
                                                    {{ argument.type.name }}
                                                {% endif %}
                                            >{},
                                            .attributes = meta_tuple {
                                                {{ include("templates/meta_attribute.inja", argument.attributes) }} {# #}
                                            },
                                        },
                                    {% endfor %} {# #}
                                },
                                .attributes = meta_tuple {
                                    {{ include("templates/meta_attribute.inja", function.attributes) }} {# #}
                                },
                            },
                        {% endif %}
                    {% endfor %}
                },
                .constructors = meta_tuple {
                    {% for constructor in class.constructors %}
                        {% if truthy($.user_data, "implicit_constructors") %}
                            {% set meta_constructor_enabled = not existsIn(constructor.attributes, "_spore_meta_constructor") or truthy(constructor.attributes, "_spore_meta_constructor") %}
                        {% else %}
                            {% set meta_constructor_enabled = truthy(class.attributes, "_spore_meta_implicit_constructors") or truthy(constructor.attributes, "_spore_meta_constructor") %}
                        {% endif %}
                        {% if meta_constructor_enabled and constructor.flags.public %}
                            meta_constructor {
                                .constructor = [] {# #}
                                {% if constructor.is_template %}
                                    < {# #}
                                      {% for template_param in constructor.template_params %}
                                          {{ template_param.type }} {{ template_param.name }} {% if not loop.is_last %} , {% endif %} {# #}
                                      {% endfor %}
                                    > {# #}
                                {% endif %}
                                ({{ class.full_name }}& this_ {# #}
                                    {% for argument in constructor.arguments %}
                                        , {{ argument.type.name }} {{ argument.name }}
                                    {% endfor %} {# #}
                                ) {
                                    new (&this_) {{ class.full_name }} {
                                        {% for argument in constructor.arguments %} {# #}
                                            {{ argument.name }} {% if argument.is_variadic %} ... {% endif %} ,
                                        {% endfor %}
                                    };
                                },
                                .this_type = meta_type_ref<{{ class.full_name }}> {},
                                .arguments = meta_tuple {
                                    {% for argument in constructor.arguments %}
                                        {% set argument_placeholder = false %}
                                        {% for template_param in constructor.template_params %}
                                            {% if contains(argument.type.name, template_param.name) %}
                                                {% set argument_placeholder = true %}
                                                {# {% set placeholder = true %} #}
                                                {#
                                                {% if starts_with(template_param.type, "typename") %}
                                                    {% set argument_placeholder = format("meta_type_placeholder<{}>", template_param.is_variadic) %}
                                                {% else %}
                                                    {% set argument_placeholder = format("meta_value_placeholder<{}, {}>", template_param.type, template_param.is_variadic) %}
                                                {% endif %}
                                                #}
                                            {% endif %}
                                        {% endfor %}
                                        meta_argument {
                                            .name = meta_string {"{{ argument.name }}"},
                                            .type = meta_type_ref< {# #}
                                                {% if truthy(argument_placeholder) %}
                                                    meta_placeholder
                                                    {# {{ argument_placeholder }} #}
                                                {% else %}
                                                    {{ argument.type.name }}
                                                {% endif %}
                                            >{},
                                            .attributes = meta_tuple {
                                                {{ include("templates/meta_attribute.inja", argument.attributes) }} {# #}
                                            },
                                        },
                                    {% endfor %} {# #}
                                },
                                .attributes = meta_tuple {
                                    {{ include("templates/meta_attribute.inja", constructor.attributes) }} {# #}
                                },
                            },
                        {% endif %}
                    {% endfor %}
                },
                .attributes = meta_tuple {
                    {{ include("templates/meta_attribute.inja", class.attributes) }} {# #}
                },
            };

            return func.template operator()<type>();
        }

    {% endif %}
{% endfor %}

{% for enum in enums %}
    {% if truthy($.user_data, "implicit_enums") %}
        {% set meta_enum_enabled = not existsIn(enum.attributes, "_spore_meta_enum") or truthy(enum.attributes, "_spore_meta_enum") %}
    {% else %}
        {% set meta_enum_enabled = truthy(enum.attributes, "_spore_meta_enum") %}
    {% endif %}
    {% if meta_enum_enabled and enum.definition and not enum.nested %}
        template <typename func_t>
        constexpr auto {{ enum.scope }}::with_meta_enum(spore::meta_adl<{{ enum.full_name }}>, func_t&& func)
        {
            using namespace spore;

            constexpr meta_enum enum_ {
                .name = meta_string{ "{{ enum.full_name }}" },
                .type = meta_type_ref<{{ enum.base.name }}>{},
                .values = meta_tuple {
                {% for value in enum.values %}
                    meta_enum_value {
                        .name = meta_string {"{{ value.name }}"},
                        .value = static_cast<{{ enum.base.name }}>({{ enum.full_name }}::{{ value.name }}),
                        .attributes = meta_tuple {
                            {{ include("templates/meta_attribute.inja", value.attributes) }}
                        },
                    },
                {% endfor %}
                },
                .attributes = meta_tuple {
                    {{ include("templates/meta_attribute.inja", enum.attributes) }}
                },
            };

            return func.template operator()<enum_>();
        }

    {% endif %}
{% endfor %}