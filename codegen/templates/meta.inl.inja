#pragma once

{% for class in classes %}
    {% if truthy($.user_data, "implicit_types") %}
        {% set meta_type_enabled = not existsIn(class.attributes, "_spore_meta_type") or truthy(class.attributes, "_spore_meta_type") %}
    {% else %}
        {% set meta_type_enabled = truthy(class.attributes, "_spore_meta_type") %}
    {% endif %}
    {% if meta_type_enabled and class.definition and not class.nested %}
        {% if class.is_template or class.is_template_specialization %}
            template < {# #}
                {% for template_param in class.template_params %}
                    {{ template_param.type }} {{ template_param.name }}
                    {% if not loop.is_last %}, {% endif %}
                {% endfor %}
            > {# #}
        {% endif %}
        constexpr spore::any_meta_type auto {{ class.scope }}::get_meta_type(const spore::meta_adl<{{ class.full_name }}>)
        {
            using namespace spore;

            using this_t = {{ class.full_name }};

            constexpr meta_type type {
                {% if class.is_template or class.is_template_specialization %}
                    .name = meta_string {"{{ class.scope }}::{{ class.name }}<"}
                    {% for template_param in class.template_params %}
                        {% if template_param.is_variadic %}
                            + meta::strings::to_string<", ", {{ template_param.name }}...>()
                        {% else %}
                            + meta::strings::to_string<{{ template_param.name }}>()
                        {% endif %}
                        {% if not loop.is_last %} + ", " {% endif %}
                    {% endfor %}
                        + meta_string {">"},
                {% else %}
                    .name = meta_string {"{{ class.full_name }}"},
                {% endif %}
                .bases = meta_tuple {
                    {% for base in class.bases %}
                        meta_base {
                            .type = meta_type_ref<{{ base.name }}>{},
                        },
                    {% endfor %}
                },
                .fields = meta_tuple {
                    {% for field in class.fields %}
                        {% if truthy($.user_data, "implicit_fields") %}
                            {% set meta_field_enabled = not existsIn(field.attributes, "_spore_meta_field") or truthy(field.attributes, "_spore_meta_field") %}
                        {% else %}
                            {% set meta_field_enabled = truthy(class.attributes, "_spore_meta_implicit_fields") or truthy(field.attributes, "_spore_meta_field") %}
                        {% endif %}
                        {% if meta_field_enabled and field.flags.public %}
                            meta_field {
                                .name = meta_string {"{{ field.name }}"},
                                .field = &this_t::{{ field.name }},
                                .attributes = meta_tuple {
                                    {{ include("templates/meta_attribute.inja", field.attributes) }} {# #}
                                },
                            },
                        {% endif %}
                    {% endfor %}
                },
                .functions = meta_tuple {
                    {% for function in class.functions %}
                        {% if truthy($.user_data, "implicit_functions") %}
                            {% set meta_function_enabled = not existsIn(function.attributes, "_spore_meta_function") or truthy(function.attributes, "_spore_meta_function") %}
                        {% else %}
                            {% set meta_function_enabled = truthy(class.attributes, "_spore_meta_implicit_functions") or truthy(function.attributes, "_spore_meta_function") %}
                        {% endif %}
                        {% if meta_function_enabled and function.flags.public %}
                            meta_function {
                                .name = meta_string {"{{ function.name }}"},
                                .function = [] {# #}
                                    {% if function.is_template %}
                                        < {# #}
                                        {% for template_param in function.template_params %}
                                            {% if template_param.kind == "non_type" %}
                                                any_meta_constant<{{ template_param.type }}>
                                            {% else %}
                                                {{ template_param.type }}
                                            {% endif %}
                                            {{ template_param.name }} {# #}
                                            {% if not loop.is_last %} , {% endif %} {# #}
                                        {% endfor %}
                                        > {# #}
                                    {% endif %}
                                    ({# #}
                                        {% if not function.flags.static %}
                                            {% if function.flags.const %} const {% endif %}
                                            this_t& this_
                                            {% if length(function.arguments) > 0 %} , {% endif %}
                                        {% endif %}
                                        {% for argument in function.arguments %}
                                            {{ argument.type.name }} {% if argument.is_variadic %} ... {% endif %} {{ " " }} {{ argument.name }}
                                            {% if not loop.is_last %} , {% endif %}
                                        {% endfor %} {# #}
                                    ) {
                                        return
                                        {% if function.flags.static %} this_t:: {% else %} this_. {% endif %}
                                        {% if function.is_template %} template {% endif %} {{ function.name }}
                                        {% if function.is_template %}
                                            < {# #}
                                            {% for template_param in function.template_params %}
                                                {{ template_param.name }}
                                                {% if template_param.kind == "non_type" %}
                                                    ::value
                                                {% endif %}
                                                {% if template_param.is_variadic %} ... {% endif %}
                                                {% if not loop.is_last %} , {% endif %}
                                            {% endfor %}
                                            > {# #}
                                        {% endif %}
                                        ( {# #}
                                            {% for argument in function.arguments %} {# #}
                                                std::forward<decltype({{ argument.name }})>({{ argument.name }}) {% if argument.is_variadic %} ... {% endif %}
                                                {% if not loop.is_last %} , {% endif %}
                                            {% endfor %}
                                        );
                                    },
                                {% set return_param_index = -1 %}
                                {% for template_param in function.template_params %}
                                    {% if contains(function.return_type.name, template_param.name) %}
                                        {% set return_param_index = loop.index %}
                                    {% endif %}
                                {% endfor %}
                                .return_type = meta_type_ref< {# #}
                                    {% if return_param_index >= 0 %}
                                        meta_parameter_ref<{{ return_param_index }}>
                                    {% else %}
                                        {{ function.return_type.name }}
                                    {% endif %}
                                >{},
                                .arguments = meta_tuple {
                                    {% if not function.flags.static %}
                                        meta_argument {
                                            .name = meta_string {"this"},
                                            .type = meta_type_ref<{% if function.flags.const %} const {% endif %} this_t&>{},
                                            .attributes = meta_tuple {},
                                        },
                                    {% endif %}
                                    {% for argument in function.arguments %}
                                        {% set argument_param_index = -1 %}
                                        {% for template_param in function.template_params %}
                                            {% if contains(argument.type.name, template_param.name) %}
                                                {% set argument_param_index = loop.index %}
                                            {% endif %}
                                        {% endfor %}
                                        meta_argument {
                                            .name = meta_string {"{{ argument.name }}"},
                                            .type = meta_type_ref< {# #}
                                                {% if argument_param_index >= 0 %}
                                                    meta_parameter_ref<{{ argument_param_index }}>
                                                {% else %}
                                                    {{ argument.type.name }}
                                                {% endif %}
                                            >{},
                                            .attributes = meta_tuple {
                                                {{ include("templates/meta_attribute.inja", argument.attributes) }} {# #}
                                            },
                                        },
                                    {% endfor %} {# #}
                                },
                                .parameters = meta_tuple {
                                    {% for template_param in function.template_params %}
                                        {% if template_param.kind == "type" %}
                                            meta_type_parameter {
                                                .name = meta_string {"{{ template_param.name }}"},
                                                .type = meta_string {"{{ template_param.type }}"},
                                                .variadic = {{ template_param.is_variadic }},
                                            },
                                        {% else if template_param.kind == "non_type" %}
                                            meta_value_parameter {
                                                .name = meta_string {"{{ template_param.name }}"},
                                                .type = meta_type_ref<{{ template_param.type }}>{},
                                                .variadic = {{ template_param.is_variadic }},
                                            },
                                        {% endif %}
                                    {% endfor %}
                                },
                                .attributes = meta_tuple {
                                    {{ include("templates/meta_attribute.inja", function.attributes) }} {# #}
                                },
                            },
                        {% endif %}
                    {% endfor %}
                },
                .constructors = meta_tuple {
                    {% for constructor in class.constructors %}
                        {% if truthy($.user_data, "implicit_constructors") %}
                            {% set meta_constructor_enabled = not existsIn(constructor.attributes, "_spore_meta_constructor") or truthy(constructor.attributes, "_spore_meta_constructor") %}
                        {% else %}
                            {% set meta_constructor_enabled = truthy(class.attributes, "_spore_meta_implicit_constructors") or truthy(constructor.attributes, "_spore_meta_constructor") %}
                        {% endif %}
                        {% if meta_constructor_enabled and constructor.flags.public %}
                            meta_constructor {
                                .constructor = [] {# #}
                                {% if constructor.is_template %}
                                    < {# #}
                                    {% for template_param in constructor.template_params %}
                                        {{ template_param.type }} {{ template_param.name }} {# #}
                                        {% if not loop.is_last %} , {% endif %} {# #}
                                    {% endfor %}
                                    > {# #}
                                {% endif %}
                                ( {# #}
                                    {% for argument in constructor.arguments %}
                                        {{ argument.type.name }} {% if argument.is_variadic %} ... {% endif %} {{ " " }} {{ argument.name }}
                                        {% if not loop.is_last %} , {% endif %} {# #}
                                    {% endfor %} {# #}
                                ) {
                                    return this_t {
                                        {% for argument in constructor.arguments %} {# #}
                                            std::forward<decltype({{ argument.name }})>({{ argument.name }})
                                            {% if argument.is_variadic %} ... {% endif %} ,
                                        {% endfor %}
                                    };
                                },
                                .this_type = meta_type_ref<this_t>{},
                                .arguments = meta_tuple {
                                    {% for argument in constructor.arguments %}
                                        {% set argument_param_index = -1 %}
                                        {% for template_param in constructor.template_params %}
                                            {% if contains(argument.type.name, template_param.name) %}
                                                {% set argument_param_index = loop.index %}
                                            {% endif %}
                                        {% endfor %}
                                        meta_argument {
                                            .name = meta_string {"{{ argument.name }}"},
                                            .type = meta_type_ref< {# #}
                                                {% if argument_param_index >= 0 %}
                                                    meta_parameter_ref<{{ argument_param_index }}>
                                                {% else %}
                                                    {{ argument.type.name }}
                                                {% endif %}
                                            >{},
                                            .attributes = meta_tuple {
                                                {{ include("templates/meta_attribute.inja", argument.attributes) }} {# #}
                                            },
                                        },
                                    {% endfor %}
                                },
                                .parameters = meta_tuple {
                                    {% for template_param in constructor.template_params %}
                                        meta_type_parameter {
                                            .name = meta_string {"{{ template_param.name }}"},
                                            .type = meta_string {"{{ template_param.type }}"},
                                            .variadic = {{ template_param.is_variadic }},
                                        },
                                    {% endfor %}
                                },
                                .attributes = meta_tuple {
                                    {{ include("templates/meta_attribute.inja", constructor.attributes) }} {# #}
                                },
                            },
                        {% endif %}
                    {% endfor %}
                },
                .attributes = meta_tuple {
                    {{ include("templates/meta_attribute.inja", class.attributes) }} {# #}
                },
                .extensions = make_extensions(meta_adl<this_t> {}),
            };

            return type;
        }

    {% endif %}
{% endfor %}

{% for enum in enums %}
    {% if truthy($.user_data, "implicit_enums") %}
        {% set meta_enum_enabled = not existsIn(enum.attributes, "_spore_meta_enum") or truthy(enum.attributes, "_spore_meta_enum") %}
    {% else %}
        {% set meta_enum_enabled = truthy(enum.attributes, "_spore_meta_enum") %}
    {% endif %}
    {% if meta_enum_enabled and enum.definition and not enum.nested %}
        constexpr spore::any_meta_enum auto {{ enum.scope }}::get_meta_enum(const spore::meta_adl<{{ enum.full_name }}>)
        {
            using namespace spore;

            using this_t = {{ enum.full_name }};

            constexpr meta_enum enum_ {
                .name = meta_string{ "{{ enum.full_name }}" },
                .type = meta_type_ref<{{ enum.base.name }}>{},
                .values = meta_tuple {
                {% for value in enum.values %}
                    meta_enum_value {
                        .name = meta_string {"{{ value.name }}"},
                        .value = static_cast<{{ enum.base.name }}>(this_t::{{ value.name }}),
                        .attributes = meta_tuple {
                            {{ include("templates/meta_attribute.inja", value.attributes) }}
                        },
                    },
                {% endfor %}
                },
                .attributes = meta_tuple {
                    {{ include("templates/meta_attribute.inja", enum.attributes) }}
                },
                .extensions = make_extensions(meta_adl<this_t> {}),
            };

            return enum_;
        }

    {% endif %}
{% endfor %}