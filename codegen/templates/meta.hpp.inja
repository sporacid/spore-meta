#pragma once

#include "spore/meta/meta.hpp"

{% for class in classes %}
    {% if truthy($.user_data, "implicit_types") %}
        {% set meta_type_enabled = not existsIn(class.attributes, "_spore_meta_type") or truthy(class.attributes, "_spore_meta_type") %}
    {% else %}
        {% set meta_type_enabled = truthy(class.attributes, "_spore_meta_type") %}
    {% endif %}
    {% if meta_type_enabled and not class.nested %}
        {% if truthy(class.outer_scope) %}
            namespace {{ class.outer_scope }}
            {
        {% endif %} {# #}
        {% if class.is_template or class.is_template_specialization %}
            template < {# #}
                {% for template_param in class.template_params %}
                    {{ template_param.type }} {{ template_param.name }}
                    {% if not loop.is_last %}, {% endif %}
                {% endfor %}
            > {# #}
        {% endif %}
        {{ class.type }} {{ class.name }}
        {% if class.is_template_specialization %}
            < {# #}
                {% for template_specialization_param in class.template_specialization_params %} {# #}
                    {{ template_specialization_param }}
                    {% if not loop.is_last %}, {% endif %}
                {% endfor %}
            > {# #}
        {% endif %};
        {% if class.is_template %}
            template < {# #}
                {% for template_param in class.template_params %}
                    {{ template_param.type }} {{ template_param.name }}
                    {% if not loop.is_last %}, {% endif %}
                {% endfor %}
            > {# #}
        {% endif %}
        constexpr spore::any_meta_type auto get_meta_type(spore::meta_adl<{{ class.full_name }}>);
        {% if truthy(class.outer_scope) %}
            }

        {% endif %}
    {% endif %}
{% endfor %}

{% for enum in enums %}
    {% if truthy($.user_data, "implicit_enums") %}
        {% set meta_enum_enabled = not existsIn(enum.attributes, "_spore_meta_enum") or truthy(enum.attributes, "_spore_meta_enum") %}
    {% else %}
        {% set meta_enum_enabled = truthy(enum.attributes, "_spore_meta_enum") %}
    {% endif %}
    {% if not enum.nested %}
        {% if truthy(enum.scope) %}
            namespace {{ enum.outer_scope }}
            {
        {% endif %} {# #}
        {{ enum.type }} {{ enum.name }} : {{ enum.base.name }};

        {% if meta_enum_enabled and enum.definition %}
            constexpr spore::any_meta_enum auto get_meta_enum(const spore::meta_adl<{{ enum.full_name }}>);
        {% endif %}
        {% if truthy(enum.outer_scope) %}
            }

        {% endif %}
    {% endif %}
{% endfor %}